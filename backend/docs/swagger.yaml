definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  handlers.ProcessRequestInput:
    properties:
      status:
        description: Status de la demande (approved/rejected)
        enum:
        - approved
        - rejected
        example: approved
        type: string
    required:
    - status
    type: object
  models.Basket:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      expiration_date:
        type: string
      id:
        type: integer
      name:
        type: string
      original_price:
        type: number
      price:
        type: number
      quantity:
        type: integer
      restaurant:
        $ref: '#/definitions/models.Restaurant'
      restaurant_id:
        type: integer
      type:
        type: string
      updatedAt:
        type: string
    required:
    - name
    - original_price
    - price
    - quantity
    - type
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: Message d'erreur
        type: string
    type: object
  models.Merchant:
    properties:
      business_name:
        description: Nom de l'entreprise
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email_pro:
        description: Email valide requis
        type: string
      id:
        type: integer
      phone_number:
        description: Numéro de téléphone (optionnel, max 15 caractères)
        type: string
      siret:
        description: Numéro SIRET
        type: string
      updatedAt:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relation vers User (clé étrangère avec cascade)
      user_id:
        description: Relation 1 à 1 vers User
        type: integer
    required:
    - business_name
    - email_pro
    - siret
    type: object
  models.MerchantRequest:
    properties:
      business_name:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email_pro:
        type: string
      id:
        type: integer
      phone_number:
        type: string
      siret:
        type: string
      status:
        description: pending, approved, rejected
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        description: Relation avec l'utilisateur qui fait la demande
        type: integer
    required:
    - business_name
    - email_pro
    - siret
    type: object
  models.Response:
    properties:
      data: {}
      message:
        example: Opération réussie
        type: string
    type: object
  models.Restaurant:
    properties:
      address:
        description: Adresse complète
        type: string
      city:
        description: Ville
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      merchant:
        allOf:
        - $ref: '#/definitions/models.Merchant'
        description: Relation avec le commerçant
      merchant_id:
        description: ID du commerçant (clé étrangère)
        type: integer
      name:
        description: Nom du restaurant (obligatoire)
        type: string
      phone_number:
        description: Numéro de téléphone (optionnel, max 15 caractères)
        type: string
      postal_code:
        description: Code postal (limité à 10 caractères pour compatibilité internationale)
        type: string
      siren:
        description: SIREN (exactement 9 chiffres, unique)
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        description: Validation d'email
        type: string
      full_name:
        description: Nom complet requis
        type: string
      id:
        type: integer
      is_admin:
        description: Est-ce un administrateur ?
        type: boolean
      password_hash:
        description: Hash du mot de passe
        type: string
      phone:
        description: Téléphone requis
        type: string
      updatedAt:
        type: string
    required:
    - email
    - full_name
    - password_hash
    - phone
    type: object
  requests.CreateMerchantRequestInput:
    properties:
      business_name:
        example: petit bateau
        type: string
      email_pro:
        example: merchant@example.com
        type: string
      phone_number:
        example: "+32452101010"
        type: string
      siret:
        example: "78467169500087"
        type: string
    required:
    - business_name
    - email_pro
    - siret
    type: object
  requests.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  requests.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      full_name:
        example: patrick
        type: string
      password:
        example: password123
        minLength: 8
        type: string
      phone:
        example: "+32460232425"
        type: string
    required:
    - email
    - full_name
    - password
    - phone
    type: object
info:
  contact: {}
paths:
  /api/admin/merchant-requests:
    get:
      description: Récupère toutes les demandes de marchand en attente (admin only)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Liste des demandes en attente
          schema:
            items:
              $ref: '#/definitions/models.MerchantRequest'
            type: array
        "401":
          description: Non authentifié
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Non autorisé
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Erreur serveur
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer les demandes en attente
      tags:
      - Admin
      - Merchants
  /api/admin/merchant-requests/{id}:
    put:
      consumes:
      - application/json
      description: Permet à un administrateur d'approuver ou rejeter une demande de
        marchand
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID de la demande
        in: path
        name: id
        required: true
        type: integer
      - description: Statut de la demande (approved/rejected)
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/handlers.ProcessRequestInput'
      produces:
      - application/json
      responses:
        "200":
          description: Demande traitée avec succès
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: ID invalide ou statut invalide
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Non authentifié
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Non autorisé
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Erreur serveur
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Traiter une demande de marchand
      tags:
      - Admin
      - Merchants
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user using email and password
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              allOf:
              - type: string
              - properties:
                  token:
                    type: string
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate user
      tags:
      - Users
  /api/auth/signup:
    post:
      consumes:
      - application/json
      description: Create a user with the provided details
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a new user
      tags:
      - Users
  /api/baskets:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all baskets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Basket'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all baskets
      tags:
      - Baskets
    post:
      consumes:
      - application/json
      description: Create a new basket with the provided details
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Basket data
        in: body
        name: basket
        required: true
        schema:
          $ref: '#/definitions/models.Basket'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Basket'
        "400":
          description: Bad request, invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new basket
      tags:
      - Baskets
  /api/baskets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a basket by its ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Basket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid basket ID
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Not authorized to delete this basket
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Basket not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a basket
      tags:
      - Baskets
    get:
      consumes:
      - application/json
      description: Retrieve a basket by its ID
      parameters:
      - description: Basket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Basket'
        "400":
          description: Invalid basket ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Basket not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a single basket
      tags:
      - Baskets
    put:
      consumes:
      - application/json
      description: Update a basket by its ID
      parameters:
      - description: Basket ID
        in: path
        name: id
        required: true
        type: integer
      - description: Basket data
        in: body
        name: basket
        required: true
        schema:
          $ref: '#/definitions/models.Basket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Basket'
        "400":
          description: Invalid basket ID or input
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Not authorized to update this basket
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Basket not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a basket
      tags:
      - Baskets
  /api/merchants/request:
    post:
      consumes:
      - application/json
      description: Permet à un utilisateur de soumettre une demande pour devenir marchand
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Données de la demande
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/requests.CreateMerchantRequestInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Créer une demande de marchand
      tags:
      - Merchants
swagger: "2.0"
