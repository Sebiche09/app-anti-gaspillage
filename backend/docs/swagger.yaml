definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  handlers.ProcessRequestInput:
    properties:
      status:
        description: Status de la demande (approved/rejected)
        enum:
        - approved
        - rejected
        example: approved
        type: string
    required:
    - status
    type: object
  models.Basket:
    properties:
      configuration:
        $ref: '#/definitions/models.BasketConfiguration'
      configuration_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      discount_percentage:
        type: number
      expiration_date:
        type: string
      id:
        type: integer
      name:
        type: string
      original_price:
        type: number
      quantity:
        type: integer
      status:
        $ref: '#/definitions/models.BasketStatus'
      status_id:
        type: integer
      store:
        $ref: '#/definitions/models.Store'
      store_id:
        type: integer
      updatedAt:
        type: string
    required:
    - configuration_id
    - discount_percentage
    - name
    - original_price
    - quantity
    - status_id
    - store_id
    type: object
  models.BasketConfiguration:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      discount_percentage:
        type: number
      id:
        type: integer
      name:
        type: string
      quantity:
        type: integer
      store:
        $ref: '#/definitions/models.Store'
      store_id:
        type: integer
      updatedAt:
        type: string
    required:
    - discount_percentage
    - name
    - quantity
    - store_id
    type: object
  models.BasketStatus:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: Message d'erreur
        type: string
    type: object
  models.Invitation:
    properties:
      acceptedAt:
        type: string
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      expiresAt:
        type: string
      id:
        type: integer
      sender:
        $ref: '#/definitions/models.User'
      senderID:
        type: integer
      status:
        $ref: '#/definitions/models.InvitationStatus'
      store:
        $ref: '#/definitions/models.Store'
      storeID:
        type: integer
      token:
        type: string
      updatedAt:
        type: string
    type: object
  models.InvitationStatus:
    enum:
    - PENDING
    - ACCEPTED
    - REJECTED
    - EXPIRED
    type: string
    x-enum-varnames:
    - InvitationPending
    - InvitationAccepted
    - InvitationRejected
    - InvitationExpired
  models.Merchant:
    properties:
      business_name:
        description: Nom de l'entreprise
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email_pro:
        description: Email valide requis
        type: string
      id:
        type: integer
      phone_number:
        description: Numéro de téléphone (optionnel, max 15 caractères)
        type: string
      siren:
        description: Numéro SIREN
        type: string
      updatedAt:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relation vers User (clé étrangère avec cascade)
      user_id:
        description: Relation 1 à 1 vers User
        type: integer
    required:
    - business_name
    - email_pro
    - siren
    type: object
  models.MerchantRequest:
    properties:
      business_name:
        type: string
      comment:
        description: Commentaire de l'administrateur
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email_pro:
        type: string
      id:
        type: integer
      phone_number:
        type: string
      siren:
        type: string
      status:
        description: pending, approved, rejected
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        description: Relation avec l'utilisateur qui fait la demande
        type: integer
    required:
    - business_name
    - email_pro
    - siren
    type: object
  models.Response:
    properties:
      data: {}
      message:
        example: Opération réussie
        type: string
    type: object
  models.Store:
    properties:
      address:
        description: Adresse complète
        type: string
      category:
        allOf:
        - $ref: '#/definitions/models.Category'
        description: Relation avec Category (clé étrangère)
      category_id:
        description: ID de la catégorie (clé étrangère)
        type: integer
      city:
        description: Ville
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      latitude:
        description: Latitude (format décimal)
        type: number
      longitude:
        description: Longitude (format décimal)
        type: number
      merchant:
        allOf:
        - $ref: '#/definitions/models.Merchant'
        description: Relation avec Merchant (clé étrangère)
      merchant_id:
        description: ID du commerçant (clé étrangère)
        type: integer
      name:
        description: Nom du restaurant (obligatoire)
        type: string
      phone_number:
        description: Numéro de téléphone (optionnel, max 15 caractères)
        type: string
      postal_code:
        description: Code postal (limité à 10 caractères pour compatibilité internationale)
        type: string
      rating:
        description: Note moyenne (sur 5)
        type: number
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        description: Validation d'email
        type: string
      expiry_time:
        description: Temps d'expiration du token de rafraîchissement
        type: string
      id:
        type: integer
      is_admin:
        description: Est-ce un administrateur ?
        type: boolean
      isEmailConfirmed:
        description: L'email a-t-il été confirmé ?
        type: boolean
      password_hash:
        description: Hash du mot de passe
        type: string
      refresh_token:
        description: Token de rafraîchissement
        type: string
      updatedAt:
        type: string
      validationCode:
        description: Code de validation pour l'inscription
        type: string
    required:
    - email
    - password_hash
    type: object
  requests.CodeValidationRequest:
    properties:
      code:
        type: string
      email:
        type: string
    type: object
  requests.CreateBasketRequest:
    properties:
      configuration_id:
        example: 1
        type: integer
      description:
        example: Ceci est un panier suprise
        type: string
      discount_percentage:
        description: 20% de réduction
        example: 0.2
        type: number
      expiration_date:
        description: Date d'expiration du panier, au format YYYY-MM-DD
        example: "2022-12-31"
        type: string
      name:
        example: panier surprise
        type: string
      original_price:
        description: Prix original avant réduction
        example: 22
        type: number
      quantity:
        description: Quantité disponible
        example: 2
        type: integer
      status_id:
        description: ID du statut du panier
        example: 1
        type: integer
      store_id:
        example: 1
        type: integer
    required:
    - configuration_id
    - discount_percentage
    - name
    - original_price
    - quantity
    - status_id
    - store_id
    type: object
  requests.CreateMerchantRequest:
    properties:
      business_name:
        example: petit bateau
        type: string
      email_pro:
        example: merchant@example.com
        type: string
      phone_number:
        example: "+32452101010"
        type: string
      siren:
        example: "784671691"
        type: string
    required:
    - business_name
    - email_pro
    - siren
    type: object
  requests.CreateStoreRequest:
    properties:
      address:
        description: Adresse complète
        example: route de baduel 11
        type: string
      category_id:
        description: ID de la catégorie (obligatoire)
        example: 1
        type: integer
      city:
        description: Ville
        example: cayenne
        type: string
      name:
        description: Nom du magasin (obligatoire)
        example: petit bateau 1
        type: string
      phone_number:
        description: Numéro de téléphone (optionnel, max 15 caractères)
        example: "+32470542125"
        type: string
      postal_code:
        description: Code postal (limité à 10 caractères pour compatibilité internationale)
        example: "97300"
        type: string
    type: object
  requests.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  requests.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  requests.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  requests.ResendCodeRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requests.UpdateMerchantRequest:
    properties:
      business_name:
        description: Nom de l'entreprise
        example: petit bateau update
        type: string
      email_pro:
        description: Email valide requis
        example: merchantupdate@example.com
        type: string
      phone_number:
        example: "+32452101010"
        type: string
      siren:
        description: Numéro SIREN
        example: "784671695"
        type: string
    required:
    - business_name
    - email_pro
    - siren
    type: object
  requests.UpdateStoreRequest:
    properties:
      address:
        description: Adresse complète
        example: route de baduel 12
        type: string
      category_id:
        description: ID de la catégorie (obligatoire)
        example: 1
        type: integer
      city:
        description: Ville
        example: remire
        type: string
      name:
        description: Nom du magasin (obligatoire)
        example: petit bateau 2
        type: string
      phone_number:
        description: Numéro de téléphone (optionnel, max 15 caractères)
        example: "+32470542125"
        type: string
      postal_code:
        description: Code postal (limité à 10 caractères pour compatibilité internationale)
        example: "97301"
        type: string
    type: object
  responses.BasketResponse:
    properties:
      address:
        type: string
      category:
        type: string
      discountPercentage:
        type: number
      discountPrice:
        type: number
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      originalPrice:
        type: number
      rating:
        type: number
    type: object
  responses.LoginResponse:
    properties:
      refresh_token:
        type: string
      token:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/admin/merchant-requests:
    get:
      description: Récupère toutes les demandes de marchand en attente (admin only)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Liste des demandes en attente
          schema:
            items:
              $ref: '#/definitions/models.MerchantRequest'
            type: array
        "401":
          description: Non authentifié
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Non autorisé
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Erreur serveur
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer les demandes en attente
      tags:
      - Admin
  /api/admin/merchant-requests/{id}:
    put:
      consumes:
      - application/json
      description: Permet à un administrateur d'approuver ou rejeter une demande de
        marchand
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID de la demande
        in: path
        name: id
        required: true
        type: integer
      - description: Statut de la demande (approved/rejected)
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/handlers.ProcessRequestInput'
      produces:
      - application/json
      responses:
        "200":
          description: Demande traitée avec succès
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: ID invalide ou statut invalide
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Non authentifié
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Non autorisé
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Erreur serveur
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Traiter une demande de marchand
      tags:
      - Admin
  /api/admin/merchants:
    get:
      description: Récupère tout les marchands (admin only)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Liste des marchands
          schema:
            items:
              $ref: '#/definitions/models.Merchant'
            type: array
        "401":
          description: Non authentifié
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Non autorisé
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Erreur serveur
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer les marchands
      tags:
      - Admin
  /api/admin/users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - Admin
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user using email and password
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate user
      tags:
      - Users
  /api/auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh the user's authentication token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/requests.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Refresh user token
      tags:
      - Users
  /api/auth/resend-code:
    post:
      consumes:
      - application/json
      description: Resend the validation code to the user's email
      parameters:
      - description: Email address
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/requests.ResendCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Resend validation code
      tags:
      - Users
  /api/auth/signup:
    post:
      consumes:
      - application/json
      description: Create a user with the provided details
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a new user
      tags:
      - Users
  /api/auth/validate-code:
    post:
      consumes:
      - application/json
      description: Valide le code envoyé par email et active le compte
      parameters:
      - description: Email et code
        in: body
        name: validation
        required: true
        schema:
          $ref: '#/definitions/requests.CodeValidationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Valider le code de confirmation
      tags:
      - Users
  /api/baskets/:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all baskets
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.BasketResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get all baskets
      tags:
      - Baskets
    post:
      consumes:
      - application/json
      description: Create a new basket with the provided details
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Basket data
        in: body
        name: basket
        required: true
        schema:
          $ref: '#/definitions/requests.CreateBasketRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Basket'
        "400":
          description: Bad request, invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new basket
      tags:
      - Baskets
  /api/baskets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a basket by its ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Basket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid basket ID
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Not authorized to delete this basket
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Basket not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a basket
      tags:
      - Baskets
    get:
      consumes:
      - application/json
      description: Retrieve a basket by its ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Basket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.BasketResponse'
        "400":
          description: Invalid basket ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Basket not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get a single basket
      tags:
      - Baskets
    put:
      consumes:
      - application/json
      description: Update a basket by its ID
      parameters:
      - description: Basket ID
        in: path
        name: id
        required: true
        type: integer
      - description: Basket data
        in: body
        name: basket
        required: true
        schema:
          $ref: '#/definitions/models.Basket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Basket'
        "400":
          description: Invalid basket ID or input
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Not authorized to update this basket
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Basket not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a basket
      tags:
      - Baskets
  /api/categories:
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
  /api/invitations:
    post:
      consumes:
      - application/json
      description: Permet à un marchand d'inviter une personne à rejoindre son restaurant
        en tant que staff
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Informations de l'invitation
        in: body
        name: request
        required: true
        schema:
          properties:
            email:
              type: string
            restaurant_id:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Invitation envoyée avec succès
          schema:
            properties:
              code:
                type: string
              message:
                type: string
            type: object
        "400":
          description: Erreur dans la requête
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Non authentifié
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Accès non autorisé
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Envoyer une invitation à rejoindre un restaurant
      tags:
      - invitations
  /api/invitations/{invitationId}:
    delete:
      description: Permet à un marchand d'annuler une invitation envoyée
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID de l'invitation
        in: path
        name: invitationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Invitation annulée avec succès
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Erreur dans la requête
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Non authentifié
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Annuler une invitation
      tags:
      - invitations
  /api/invitations/accept:
    get:
      consumes:
      - application/json
      description: Permet à un utilisateur d'accepter une invitation à rejoindre un
        restaurant en tant que staff
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Code d'invitation
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Invitation acceptée avec succès
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Erreur dans la requête
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Non authentifié
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Accepter une invitation à rejoindre un restaurant
      tags:
      - invitations
  /api/merchants:
    delete:
      consumes:
      - application/json
      description: Permet à un marchand de supprimer son compte
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Suppression d'un marchand
      tags:
      - Merchants
    get:
      description: Récupère les informations du marchand actuel
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Informations du marchand
          schema:
            $ref: '#/definitions/models.Merchant'
        "401":
          description: Non authentifié
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Non autorisé
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Marchand non trouvé
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Erreur serveur
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer information d'un marchand
      tags:
      - Merchants
    post:
      consumes:
      - application/json
      description: Permet à un utilisateur de soumettre une demande pour devenir marchand
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Données de la demande
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/requests.CreateMerchantRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Créer une demande de marchand
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Permet à un marchand de mettre à jour ses informations
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Données du marchand
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateMerchantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update un marchand
      tags:
      - Merchants
  /api/merchants/magasins/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Magasin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
  /api/merchants/request-status:
    get:
      description: Récupère les détails de la demande de marchand de l'utilisateur
        actuel
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Détails de la demande
          schema:
            $ref: '#/definitions/models.MerchantRequest'
        "401":
          description: Non authentifié
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Non autorisé
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Demande non trouvée
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Erreur serveur
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer la demande du marchand
      tags:
      - Users
  /api/merchants/stores:
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
    post:
      consumes:
      - application/json
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Données de la demande
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/requests.CreateStoreRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
  /api/merchants/stores/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Magasin ID
        in: path
        name: id
        required: true
        type: integer
      - description: Données de la demande
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateStoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
  /api/restaurants/{restaurantId}/invitations:
    get:
      description: Permet à un marchand de voir toutes les invitations en attente
        pour son restaurant
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID du restaurant
        in: path
        name: restaurantId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Liste des invitations en attente
          schema:
            items:
              $ref: '#/definitions/models.Invitation'
            type: array
        "400":
          description: Erreur dans la requête
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Non authentifié
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Accès non autorisé
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Récupérer les invitations en attente pour un restaurant
      tags:
      - invitations
  /api/stores:
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
  /api/stores/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID du magasin
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
swagger: "2.0"
